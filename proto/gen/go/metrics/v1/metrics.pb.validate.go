// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: metrics/v1/metrics.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Metric with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metric with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetricMultiError, or nil if none found.
func (m *Metric) ValidateAll() error {
	return m.validate(true)
}

func (m *Metric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for Labels

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return MetricMultiError(errors)
	}

	return nil
}

// MetricMultiError is an error wrapping multiple validation errors returned by
// Metric.ValidateAll() if the designated constraints aren't met.
type MetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricMultiError) AllErrors() []error { return m }

// MetricValidationError is the validation error returned by Metric.Validate if
// the designated constraints aren't met.
type MetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricValidationError) ErrorName() string { return "MetricValidationError" }

// Error satisfies the builtin error interface
func (e MetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricValidationError{}

// Validate checks the field values on MetricsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricsRequestMultiError,
// or nil if none found.
func (m *MetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricName

	// no validation rules for FromTimestamp

	// no validation rules for ToTimestamp

	if len(errors) > 0 {
		return MetricsRequestMultiError(errors)
	}

	return nil
}

// MetricsRequestMultiError is an error wrapping multiple validation errors
// returned by MetricsRequest.ValidateAll() if the designated constraints
// aren't met.
type MetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsRequestMultiError) AllErrors() []error { return m }

// MetricsRequestValidationError is the validation error returned by
// MetricsRequest.Validate if the designated constraints aren't met.
type MetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsRequestValidationError) ErrorName() string { return "MetricsRequestValidationError" }

// Error satisfies the builtin error interface
func (e MetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsRequestValidationError{}

// Validate checks the field values on CollectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectResponseMultiError, or nil if none found.
func (m *CollectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CollectResponseMultiError(errors)
	}

	return nil
}

// CollectResponseMultiError is an error wrapping multiple validation errors
// returned by CollectResponse.ValidateAll() if the designated constraints
// aren't met.
type CollectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectResponseMultiError) AllErrors() []error { return m }

// CollectResponseValidationError is the validation error returned by
// CollectResponse.Validate if the designated constraints aren't met.
type CollectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectResponseValidationError) ErrorName() string { return "CollectResponseValidationError" }

// Error satisfies the builtin error interface
func (e CollectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectResponseValidationError{}

// Validate checks the field values on MetricsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsResponseMultiError, or nil if none found.
func (m *MetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MetricsResponseMultiError(errors)
	}

	return nil
}

// MetricsResponseMultiError is an error wrapping multiple validation errors
// returned by MetricsResponse.ValidateAll() if the designated constraints
// aren't met.
type MetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsResponseMultiError) AllErrors() []error { return m }

// MetricsResponseValidationError is the validation error returned by
// MetricsResponse.Validate if the designated constraints aren't met.
type MetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsResponseValidationError) ErrorName() string { return "MetricsResponseValidationError" }

// Error satisfies the builtin error interface
func (e MetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsResponseValidationError{}

// Validate checks the field values on AggregationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AggregationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregationRequestMultiError, or nil if none found.
func (m *AggregationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AggregationRequestMultiError(errors)
	}

	return nil
}

// AggregationRequestMultiError is an error wrapping multiple validation errors
// returned by AggregationRequest.ValidateAll() if the designated constraints
// aren't met.
type AggregationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationRequestMultiError) AllErrors() []error { return m }

// AggregationRequestValidationError is the validation error returned by
// AggregationRequest.Validate if the designated constraints aren't met.
type AggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationRequestValidationError) ErrorName() string {
	return "AggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationRequestValidationError{}

// Validate checks the field values on AggregationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AggregationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregationResponseMultiError, or nil if none found.
func (m *AggregationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AggregationResponseMultiError(errors)
	}

	return nil
}

// AggregationResponseMultiError is an error wrapping multiple validation
// errors returned by AggregationResponse.ValidateAll() if the designated
// constraints aren't met.
type AggregationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregationResponseMultiError) AllErrors() []error { return m }

// AggregationResponseValidationError is the validation error returned by
// AggregationResponse.Validate if the designated constraints aren't met.
type AggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationResponseValidationError) ErrorName() string {
	return "AggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationResponseValidationError{}
