// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: metrics/v1/metrics.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on SystemMetric with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SystemMetric) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Value

	// no validation rules for Labels

	// no validation rules for ServerId

	// no validation rules for Timestamp

	// no validation rules for Unit

	return nil
}

// SystemMetricValidationError is the validation error returned by
// SystemMetric.Validate if the designated constraints aren't met.
type SystemMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemMetricValidationError) ErrorName() string { return "SystemMetricValidationError" }

// Error satisfies the builtin error interface
func (e SystemMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemMetricValidationError{}

// Validate checks the field values on StreamMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamMetricsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServerId

	// no validation rules for IntervalSeconds

	return nil
}

// StreamMetricsRequestValidationError is the validation error returned by
// StreamMetricsRequest.Validate if the designated constraints aren't met.
type StreamMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMetricsRequestValidationError) ErrorName() string {
	return "StreamMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMetricsRequestValidationError{}

// Validate checks the field values on StreamMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamMetricsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMetricsResponseValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	return nil
}

// StreamMetricsResponseValidationError is the validation error returned by
// StreamMetricsResponse.Validate if the designated constraints aren't met.
type StreamMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMetricsResponseValidationError) ErrorName() string {
	return "StreamMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMetricsResponseValidationError{}

// Validate checks the field values on MetricHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MetricHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricType

	// no validation rules for ServerId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Labels

	return nil
}

// MetricHistoryRequestValidationError is the validation error returned by
// MetricHistoryRequest.Validate if the designated constraints aren't met.
type MetricHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricHistoryRequestValidationError) ErrorName() string {
	return "MetricHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricHistoryRequestValidationError{}

// Validate checks the field values on MetricHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MetricHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricHistoryResponseValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MetricType

	// no validation rules for TotalCount

	return nil
}

// MetricHistoryResponseValidationError is the validation error returned by
// MetricHistoryResponse.Validate if the designated constraints aren't met.
type MetricHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricHistoryResponseValidationError) ErrorName() string {
	return "MetricHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricHistoryResponseValidationError{}

// Validate checks the field values on AlertRule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AlertRule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricType

	// no validation rules for Threshold

	// no validation rules for Operator

	// no validation rules for Duration

	// no validation rules for Severity

	return nil
}

// AlertRuleValidationError is the validation error returned by
// AlertRule.Validate if the designated constraints aren't met.
type AlertRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRuleValidationError) ErrorName() string { return "AlertRuleValidationError" }

// Error satisfies the builtin error interface
func (e AlertRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRuleValidationError{}

// Validate checks the field values on ConfigureAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConfigureAlertRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAlertRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureAlertRequestValidationError{
				field:  "AlertRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RuleId

	// no validation rules for Description

	// no validation rules for Enabled

	return nil
}

// ConfigureAlertRequestValidationError is the validation error returned by
// ConfigureAlertRequest.Validate if the designated constraints aren't met.
type ConfigureAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureAlertRequestValidationError) ErrorName() string {
	return "ConfigureAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureAlertRequestValidationError{}

// Validate checks the field values on ConfigureAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConfigureAlertResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RuleId

	// no validation rules for Success

	// no validation rules for Message

	if v, ok := interface{}(m.GetConfiguredRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureAlertResponseValidationError{
				field:  "ConfiguredRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConfigureAlertResponseValidationError is the validation error returned by
// ConfigureAlertResponse.Validate if the designated constraints aren't met.
type ConfigureAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureAlertResponseValidationError) ErrorName() string {
	return "ConfigureAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureAlertResponseValidationError{}

// Validate checks the field values on GetDashboardMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDashboardMetricsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Interval

	// no validation rules for Labels

	// no validation rules for Aggregation

	return nil
}

// GetDashboardMetricsRequestValidationError is the validation error returned
// by GetDashboardMetricsRequest.Validate if the designated constraints aren't met.
type GetDashboardMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDashboardMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDashboardMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDashboardMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDashboardMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDashboardMetricsRequestValidationError) ErrorName() string {
	return "GetDashboardMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDashboardMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDashboardMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDashboardMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDashboardMetricsRequestValidationError{}

// Validate checks the field values on GetDashboardMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDashboardMetricsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSeries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDashboardMetricsResponseValidationError{
					field:  fmt.Sprintf("Series[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Meta

	return nil
}

// GetDashboardMetricsResponseValidationError is the validation error returned
// by GetDashboardMetricsResponse.Validate if the designated constraints
// aren't met.
type GetDashboardMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDashboardMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDashboardMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDashboardMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDashboardMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDashboardMetricsResponseValidationError) ErrorName() string {
	return "GetDashboardMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDashboardMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDashboardMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDashboardMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDashboardMetricsResponseValidationError{}

// Validate checks the field values on MetricSeries with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MetricSeries) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricType

	// no validation rules for Labels

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricSeriesValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Unit

	return nil
}

// MetricSeriesValidationError is the validation error returned by
// MetricSeries.Validate if the designated constraints aren't met.
type MetricSeriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSeriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSeriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSeriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSeriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSeriesValidationError) ErrorName() string { return "MetricSeriesValidationError" }

// Error satisfies the builtin error interface
func (e MetricSeriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSeries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSeriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSeriesValidationError{}

// Validate checks the field values on DataPoint with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DataPoint) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Timestamp

	// no validation rules for Value

	return nil
}

// DataPointValidationError is the validation error returned by
// DataPoint.Validate if the designated constraints aren't met.
type DataPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataPointValidationError) ErrorName() string { return "DataPointValidationError" }

// Error satisfies the builtin error interface
func (e DataPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataPointValidationError{}
