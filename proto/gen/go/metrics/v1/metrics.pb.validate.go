// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: metrics/v1/metrics.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SystemMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemMetric with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemMetricMultiError, or
// nil if none found.
func (m *SystemMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemMetricValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemMetricValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemMetricValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CpuUsage

	// no validation rules for MemoryUsage

	// no validation rules for MemoryTotal

	// no validation rules for MemoryFree

	// no validation rules for DiskUsage

	// no validation rules for DiskTotal

	// no validation rules for DiskFree

	if len(errors) > 0 {
		return SystemMetricMultiError(errors)
	}

	return nil
}

// SystemMetricMultiError is an error wrapping multiple validation errors
// returned by SystemMetric.ValidateAll() if the designated constraints aren't met.
type SystemMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemMetricMultiError) AllErrors() []error { return m }

// SystemMetricValidationError is the validation error returned by
// SystemMetric.Validate if the designated constraints aren't met.
type SystemMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemMetricValidationError) ErrorName() string { return "SystemMetricValidationError" }

// Error satisfies the builtin error interface
func (e SystemMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemMetricValidationError{}

// Validate checks the field values on StreamMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamMetricsRequestMultiError, or nil if none found.
func (m *StreamMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for IntervalSeconds

	if len(errors) > 0 {
		return StreamMetricsRequestMultiError(errors)
	}

	return nil
}

// StreamMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by StreamMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMetricsRequestMultiError) AllErrors() []error { return m }

// StreamMetricsRequestValidationError is the validation error returned by
// StreamMetricsRequest.Validate if the designated constraints aren't met.
type StreamMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMetricsRequestValidationError) ErrorName() string {
	return "StreamMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMetricsRequestValidationError{}

// Validate checks the field values on StreamMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamMetricsResponseMultiError, or nil if none found.
func (m *StreamMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMetricsResponseValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return StreamMetricsResponseMultiError(errors)
	}

	return nil
}

// StreamMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by StreamMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMetricsResponseMultiError) AllErrors() []error { return m }

// StreamMetricsResponseValidationError is the validation error returned by
// StreamMetricsResponse.Validate if the designated constraints aren't met.
type StreamMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMetricsResponseValidationError) ErrorName() string {
	return "StreamMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMetricsResponseValidationError{}

// Validate checks the field values on MetricHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricHistoryRequestMultiError, or nil if none found.
func (m *MetricHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricType

	// no validation rules for ServerId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Labels

	if len(errors) > 0 {
		return MetricHistoryRequestMultiError(errors)
	}

	return nil
}

// MetricHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by MetricHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type MetricHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricHistoryRequestMultiError) AllErrors() []error { return m }

// MetricHistoryRequestValidationError is the validation error returned by
// MetricHistoryRequest.Validate if the designated constraints aren't met.
type MetricHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricHistoryRequestValidationError) ErrorName() string {
	return "MetricHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricHistoryRequestValidationError{}

// Validate checks the field values on MetricHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricHistoryResponseMultiError, or nil if none found.
func (m *MetricHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricHistoryResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricHistoryResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricHistoryResponseValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MetricType

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return MetricHistoryResponseMultiError(errors)
	}

	return nil
}

// MetricHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by MetricHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type MetricHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricHistoryResponseMultiError) AllErrors() []error { return m }

// MetricHistoryResponseValidationError is the validation error returned by
// MetricHistoryResponse.Validate if the designated constraints aren't met.
type MetricHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricHistoryResponseValidationError) ErrorName() string {
	return "MetricHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricHistoryResponseValidationError{}

// Validate checks the field values on AlertRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlertRuleMultiError, or nil
// if none found.
func (m *AlertRule) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricType

	// no validation rules for Threshold

	// no validation rules for Operator

	// no validation rules for Duration

	// no validation rules for Severity

	if len(errors) > 0 {
		return AlertRuleMultiError(errors)
	}

	return nil
}

// AlertRuleMultiError is an error wrapping multiple validation errors returned
// by AlertRule.ValidateAll() if the designated constraints aren't met.
type AlertRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertRuleMultiError) AllErrors() []error { return m }

// AlertRuleValidationError is the validation error returned by
// AlertRule.Validate if the designated constraints aren't met.
type AlertRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRuleValidationError) ErrorName() string { return "AlertRuleValidationError" }

// Error satisfies the builtin error interface
func (e AlertRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRuleValidationError{}

// Validate checks the field values on ConfigureAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureAlertRequestMultiError, or nil if none found.
func (m *ConfigureAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAlertRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureAlertRequestValidationError{
					field:  "AlertRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureAlertRequestValidationError{
					field:  "AlertRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlertRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureAlertRequestValidationError{
				field:  "AlertRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RuleId

	// no validation rules for Description

	// no validation rules for Enabled

	if len(errors) > 0 {
		return ConfigureAlertRequestMultiError(errors)
	}

	return nil
}

// ConfigureAlertRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigureAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfigureAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureAlertRequestMultiError) AllErrors() []error { return m }

// ConfigureAlertRequestValidationError is the validation error returned by
// ConfigureAlertRequest.Validate if the designated constraints aren't met.
type ConfigureAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureAlertRequestValidationError) ErrorName() string {
	return "ConfigureAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureAlertRequestValidationError{}

// Validate checks the field values on ConfigureAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureAlertResponseMultiError, or nil if none found.
func (m *ConfigureAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuleId

	// no validation rules for Success

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetConfiguredRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigureAlertResponseValidationError{
					field:  "ConfiguredRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigureAlertResponseValidationError{
					field:  "ConfiguredRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguredRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureAlertResponseValidationError{
				field:  "ConfiguredRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigureAlertResponseMultiError(errors)
	}

	return nil
}

// ConfigureAlertResponseMultiError is an error wrapping multiple validation
// errors returned by ConfigureAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfigureAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureAlertResponseMultiError) AllErrors() []error { return m }

// ConfigureAlertResponseValidationError is the validation error returned by
// ConfigureAlertResponse.Validate if the designated constraints aren't met.
type ConfigureAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureAlertResponseValidationError) ErrorName() string {
	return "ConfigureAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureAlertResponseValidationError{}

// Validate checks the field values on GetDashboardMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDashboardMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDashboardMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDashboardMetricsRequestMultiError, or nil if none found.
func (m *GetDashboardMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDashboardMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Interval

	// no validation rules for Labels

	// no validation rules for Aggregation

	if len(errors) > 0 {
		return GetDashboardMetricsRequestMultiError(errors)
	}

	return nil
}

// GetDashboardMetricsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDashboardMetricsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDashboardMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDashboardMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDashboardMetricsRequestMultiError) AllErrors() []error { return m }

// GetDashboardMetricsRequestValidationError is the validation error returned
// by GetDashboardMetricsRequest.Validate if the designated constraints aren't met.
type GetDashboardMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDashboardMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDashboardMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDashboardMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDashboardMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDashboardMetricsRequestValidationError) ErrorName() string {
	return "GetDashboardMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDashboardMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDashboardMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDashboardMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDashboardMetricsRequestValidationError{}

// Validate checks the field values on GetDashboardMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDashboardMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDashboardMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDashboardMetricsResponseMultiError, or nil if none found.
func (m *GetDashboardMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDashboardMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSeries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDashboardMetricsResponseValidationError{
						field:  fmt.Sprintf("Series[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDashboardMetricsResponseValidationError{
						field:  fmt.Sprintf("Series[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDashboardMetricsResponseValidationError{
					field:  fmt.Sprintf("Series[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Meta

	if len(errors) > 0 {
		return GetDashboardMetricsResponseMultiError(errors)
	}

	return nil
}

// GetDashboardMetricsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDashboardMetricsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDashboardMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDashboardMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDashboardMetricsResponseMultiError) AllErrors() []error { return m }

// GetDashboardMetricsResponseValidationError is the validation error returned
// by GetDashboardMetricsResponse.Validate if the designated constraints
// aren't met.
type GetDashboardMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDashboardMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDashboardMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDashboardMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDashboardMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDashboardMetricsResponseValidationError) ErrorName() string {
	return "GetDashboardMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDashboardMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDashboardMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDashboardMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDashboardMetricsResponseValidationError{}

// Validate checks the field values on MetricSeries with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricSeries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricSeries with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricSeriesMultiError, or
// nil if none found.
func (m *MetricSeries) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricSeries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricType

	// no validation rules for Labels

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricSeriesValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricSeriesValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricSeriesValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Unit

	if len(errors) > 0 {
		return MetricSeriesMultiError(errors)
	}

	return nil
}

// MetricSeriesMultiError is an error wrapping multiple validation errors
// returned by MetricSeries.ValidateAll() if the designated constraints aren't met.
type MetricSeriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricSeriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricSeriesMultiError) AllErrors() []error { return m }

// MetricSeriesValidationError is the validation error returned by
// MetricSeries.Validate if the designated constraints aren't met.
type MetricSeriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSeriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSeriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSeriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSeriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSeriesValidationError) ErrorName() string { return "MetricSeriesValidationError" }

// Error satisfies the builtin error interface
func (e MetricSeriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSeries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSeriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSeriesValidationError{}

// Validate checks the field values on DataPoint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataPoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataPointMultiError, or nil
// if none found.
func (m *DataPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *DataPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Value

	if len(errors) > 0 {
		return DataPointMultiError(errors)
	}

	return nil
}

// DataPointMultiError is an error wrapping multiple validation errors returned
// by DataPoint.ValidateAll() if the designated constraints aren't met.
type DataPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataPointMultiError) AllErrors() []error { return m }

// DataPointValidationError is the validation error returned by
// DataPoint.Validate if the designated constraints aren't met.
type DataPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataPointValidationError) ErrorName() string { return "DataPointValidationError" }

// Error satisfies the builtin error interface
func (e DataPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataPointValidationError{}
