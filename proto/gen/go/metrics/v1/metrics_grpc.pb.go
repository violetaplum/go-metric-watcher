// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: metrics/v1/metrics.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsService_CollectMetrics_FullMethodName       = "/metrics.v1.MetricsService/CollectMetrics"
	MetricsService_GetMetrics_FullMethodName           = "/metrics.v1.MetricsService/GetMetrics"
	MetricsService_GetAggregatedMetrics_FullMethodName = "/metrics.v1.MetricsService/GetAggregatedMetrics"
)

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServiceClient interface {
	CollectMetrics(ctx context.Context, opts ...grpc.CallOption) (MetricsService_CollectMetricsClient, error)
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (MetricsService_GetMetricsClient, error)
	GetAggregatedMetrics(ctx context.Context, in *AggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) CollectMetrics(ctx context.Context, opts ...grpc.CallOption) (MetricsService_CollectMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricsService_ServiceDesc.Streams[0], MetricsService_CollectMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsServiceCollectMetricsClient{stream}
	return x, nil
}

type MetricsService_CollectMetricsClient interface {
	Send(*Metric) error
	CloseAndRecv() (*CollectResponse, error)
	grpc.ClientStream
}

type metricsServiceCollectMetricsClient struct {
	grpc.ClientStream
}

func (x *metricsServiceCollectMetricsClient) Send(m *Metric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsServiceCollectMetricsClient) CloseAndRecv() (*CollectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CollectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricsServiceClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (MetricsService_GetMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricsService_ServiceDesc.Streams[1], MetricsService_GetMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsServiceGetMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricsService_GetMetricsClient interface {
	Recv() (*MetricsResponse, error)
	grpc.ClientStream
}

type metricsServiceGetMetricsClient struct {
	grpc.ClientStream
}

func (x *metricsServiceGetMetricsClient) Recv() (*MetricsResponse, error) {
	m := new(MetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricsServiceClient) GetAggregatedMetrics(ctx context.Context, in *AggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error) {
	out := new(AggregationResponse)
	err := c.cc.Invoke(ctx, MetricsService_GetAggregatedMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceServer is the server API for MetricsService service.
// All implementations must embed UnimplementedMetricsServiceServer
// for forward compatibility
type MetricsServiceServer interface {
	CollectMetrics(MetricsService_CollectMetricsServer) error
	GetMetrics(*MetricsRequest, MetricsService_GetMetricsServer) error
	GetAggregatedMetrics(context.Context, *AggregationRequest) (*AggregationResponse, error)
	mustEmbedUnimplementedMetricsServiceServer()
}

// UnimplementedMetricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServiceServer struct {
}

func (UnimplementedMetricsServiceServer) CollectMetrics(MetricsService_CollectMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) GetMetrics(*MetricsRequest, MetricsService_GetMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) GetAggregatedMetrics(context.Context, *AggregationRequest) (*AggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_CollectMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServiceServer).CollectMetrics(&metricsServiceCollectMetricsServer{stream})
}

type MetricsService_CollectMetricsServer interface {
	SendAndClose(*CollectResponse) error
	Recv() (*Metric, error)
	grpc.ServerStream
}

type metricsServiceCollectMetricsServer struct {
	grpc.ServerStream
}

func (x *metricsServiceCollectMetricsServer) SendAndClose(m *CollectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsServiceCollectMetricsServer) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricsService_GetMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsServiceServer).GetMetrics(m, &metricsServiceGetMetricsServer{stream})
}

type MetricsService_GetMetricsServer interface {
	Send(*MetricsResponse) error
	grpc.ServerStream
}

type metricsServiceGetMetricsServer struct {
	grpc.ServerStream
}

func (x *metricsServiceGetMetricsServer) Send(m *MetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MetricsService_GetAggregatedMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetAggregatedMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_GetAggregatedMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetAggregatedMetrics(ctx, req.(*AggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.v1.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregatedMetrics",
			Handler:    _MetricsService_GetAggregatedMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CollectMetrics",
			Handler:       _MetricsService_CollectMetrics_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMetrics",
			Handler:       _MetricsService_GetMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metrics/v1/metrics.proto",
}
