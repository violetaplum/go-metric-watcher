syntax = "proto3";
package metrics.v1;  // v1 추가
option go_package = "github.com/aspyn/metrics_proto/gen/go/metrics/v1";  // 경로 수정

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Metrics API";
    version: "1.0";
    description: "";
    contact: {
      name: "gRPC-Metrics Project";
      url: "https://github.com/violetaplum/go-metric-watcher";
      email: "violetaplume@gmail.com";
    };
  }
  schemes: [HTTPS, HTTP];
  consumes: "application/json";
  produces: "application/json";  // produces 추가
};

service MetricsService {
  rpc StreamMetrics(StreamMetricsRequest) returns (StreamMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/metrics/stream"
    };
  }
  rpc GetMetricHistory(MetricHistoryRequest) returns (MetricHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/metrics/history"
    };
  }
  rpc ConfigureAlert(ConfigureAlertRequest) returns (ConfigureAlertResponse) {
    option (google.api.http) = {
      post: "/api/v1/metrics/alert/configure"
      body: "*"
    };
  }

  rpc GetDashboardMetrics(GetDashboardMetricsRequest) returns (GetDashboardMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/metrics/dasboard"
    };
  }
}


message SystemMetric {
  // 메트릭이 수집된 시간
  google.protobuf.Timestamp timestamp = 1;

  // CPU 관련
  double cpu_usage = 2;    // CPU 사용률 (%)

  // 메모리 관련
  double memory_usage = 3; // 메모리 사용률 (%)
  uint64 memory_total = 4; // 전체 메모리 크기 (bytes)
  uint64 memory_free = 5;  // 사용 가능한 메모리 (bytes)

  // 디스크 관련
  double disk_usage = 6;   // 디스크 사용률 (%)
  uint64 disk_total = 7;   // 전체 디스크 크기 (bytes)
  uint64 disk_free = 8;    // 사용 가능한 디스크 공간 (bytes)
}

enum MetricUnit {
  UNIT_UNSPECIFIED = 0;
  PERCENTAGE = 1;
  BYTES = 2;
  SECONDS = 3;
  UNIT_COUNT = 4;        // COUNT -> UNIT_COUNT로 변경
  BYTES_PER_SECOND = 5;
}
//    MetricUnit과 AggregationType enum에서 동일한 COUNT 이름을 사용하는 것이 문제가 되었네요.
//    protobuf는 C++ 스코핑 규칙을 따르기 때문에 이름을 다르게 해야 합니다.

message StreamMetricsRequest {
  string server_id = 1;
  repeated string metric_types = 2;
  int32 interval_seconds = 3;
}

message StreamMetricsResponse {
  repeated SystemMetric metrics = 1;
  string status = 2;
}

message MetricHistoryRequest {
  string metric_type = 1;
  string server_id = 2;
  int64 start_time = 3;
  int64 end_time = 4;
  map<string, string> labels = 5;
}

message MetricHistoryResponse {
  repeated SystemMetric metrics = 1;
  string metric_type = 2;
  int64 total_count = 3;
}

message AlertRule {
  string metric_type = 1;
  double threshold = 2;
  string operator = 3;
  int64 duration = 4;
  string severity = 5;
  repeated string channels = 6;
}

message ConfigureAlertRequest {
  AlertRule alert_rule = 1;
  string rule_id = 2;
  string description = 3;
  bool enabled = 4;
}

message ConfigureAlertResponse {
  string rule_id = 1;
  bool success = 2;
  string message = 3;
  AlertRule configured_rule = 4;
}

message GetDashboardMetricsRequest {
  repeated string metric_types = 1;
  int64 start_time = 2;
  int64 end_time = 3;
  string interval = 4;
  map<string, string> labels = 5;
  AggregationType aggregation = 6;
}

message GetDashboardMetricsResponse {
  repeated MetricSeries series = 1;
  map<string, string> meta = 2;
}

message MetricSeries {
  string metric_type = 1;
  map<string, string> labels = 2;
  repeated DataPoint points = 3;
  MetricUnit unit = 4;
}

message DataPoint {
  int64 timestamp = 1;
  double value = 2;
}

enum AggregationType {
  AGGREGATION_UNSPECIFIED = 0;
  AVG = 1;
  SUM = 2;
  MIN = 3;
  MAX = 4;
  COUNT = 5;
}