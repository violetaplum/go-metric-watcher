version: '3.8'
services:
  metrics-api:
    build:
      context: .. # 상위 디렉토리를 context로 지정
      dockerfile: deployments/Dockerfile
      target: metrics-api #Dockerfile 의 "AS metrics-api" 스테이지를 사용
    ports:
      - "8080:8080"
    depends_on:
#      - timescaledb
      - prometheus
      - grafana
    networks:
      - monitoring

  metrics-collector:
    build:
      context: ..
      dockerfile: deployments/Dockerfile
      target: metrics-collector #Dockerfile 의 "AS metrics-collector" 스테이지를 사용
    depends_on:
#      - timescaledb
      - prometheus
      - grafana
    networks:
      - monitoring

#  timescaledb:
#    image: timescale/timescaledb:latest-pg14
#    ports:
#      - "5432:5432"
#    environment:
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=password
#      #      - POSTGRES_DB=metrics_db
#      - TIMESCALEDB_PRELOAD_SHARED_LIBRARIES=timescaledb
#    volumes:
#      - timescaledb_data:/var/lib/postgresql/data
#      - ./init-scripts:/docker-entrypoint-initdb.d  # 초기화 스크립트 경로
#    networks:
#      - monitoring
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres -d metrics_db"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 10s

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus # 데이터 지속성을 위해 볼륨 추가
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
#    depends_on:
#      - timescaledb

  #  prometheus-adapter:
  #    image: timescale/timescale-prometheus:0.1.0-beta.4
  #    ports:
  #      - "9201:9201"
  #    environment:
  #      - TS_PROM_DB_CONNECT_RETRIES=10
  #      - TS_PROM_DB_HOST=timescaledb
  #      - TS_PROM_DB_PORT=5432
  #      - TS_PROM_DB_USER=postgres
  #      - TS_PROM_DB_PASSWORD=password
  #      - TS_PROM_DB_NAME=metrics_db
  #      - TS_PROM_DB_SSL_MODE=disable
  #      - TS_PROM_DB="postgres://postgres:password@timescaledb:5432/metrics_db?sslmode=disable"
  #    networks:
  #      - monitoring
  #    depends_on:
  #      timescaledb:
  #        condition: service_healthy
  #      prometheus:
  #        condition: service_started

  grafana:
    image: grafana/grafana:latest
    command: >
      sh -c "mkdir -p /etc/grafana/provisioning/{dashboards,datasources,plugins,alerting} && /run.sh"
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=adminç
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - monitoring

# 네트워크 정의
networks:
  monitoring:
    driver: bridge


volumes:
#  timescaledb_data: # TimescaleDB용 볼륨
  grafana_data:     # Grafana용 볼륨
  prometheus_data:  # Prometheus 데이터를 위한 볼륨

