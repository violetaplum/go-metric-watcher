// Code generated by MockGen. DO NOT EDIT.
// Source: domain.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/violetaplum/go-metric-watcher/internal/model"
	monitoring "github.com/violetaplum/go-metric-watcher/pkg/monitoring"
)

// MockPrometheusRepository is a mock of PrometheusRepository interface.
type MockPrometheusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusRepositoryMockRecorder
}

// MockPrometheusRepositoryMockRecorder is the mock recorder for MockPrometheusRepository.
type MockPrometheusRepositoryMockRecorder struct {
	mock *MockPrometheusRepository
}

// NewMockPrometheusRepository creates a new mock instance.
func NewMockPrometheusRepository(ctrl *gomock.Controller) *MockPrometheusRepository {
	mock := &MockPrometheusRepository{ctrl: ctrl}
	mock.recorder = &MockPrometheusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusRepository) EXPECT() *MockPrometheusRepositoryMockRecorder {
	return m.recorder
}

// SaveCPUMetrics mocks base method.
func (m *MockPrometheusRepository) SaveCPUMetrics(metrics *monitoring.CPUMetrics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveCPUMetrics", metrics)
}

// SaveCPUMetrics indicates an expected call of SaveCPUMetrics.
func (mr *MockPrometheusRepositoryMockRecorder) SaveCPUMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCPUMetrics", reflect.TypeOf((*MockPrometheusRepository)(nil).SaveCPUMetrics), metrics)
}

// SaveDiskMetrics mocks base method.
func (m *MockPrometheusRepository) SaveDiskMetrics(metrics *monitoring.DiskMetrics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveDiskMetrics", metrics)
}

// SaveDiskMetrics indicates an expected call of SaveDiskMetrics.
func (mr *MockPrometheusRepositoryMockRecorder) SaveDiskMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDiskMetrics", reflect.TypeOf((*MockPrometheusRepository)(nil).SaveDiskMetrics), metrics)
}

// SaveMemoryMetrics mocks base method.
func (m *MockPrometheusRepository) SaveMemoryMetrics(metrics *monitoring.MemoryMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveMemoryMetrics", metrics)
}

// SaveMemoryMetrics indicates an expected call of SaveMemoryMetrics.
func (mr *MockPrometheusRepositoryMockRecorder) SaveMemoryMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMemoryMetrics", reflect.TypeOf((*MockPrometheusRepository)(nil).SaveMemoryMetrics), metrics)
}

// SaveNetworkMetrics mocks base method.
func (m *MockPrometheusRepository) SaveNetworkMetrics(metrics map[string]*monitoring.NetworkMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveNetworkMetrics", metrics)
}

// SaveNetworkMetrics indicates an expected call of SaveNetworkMetrics.
func (mr *MockPrometheusRepositoryMockRecorder) SaveNetworkMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNetworkMetrics", reflect.TypeOf((*MockPrometheusRepository)(nil).SaveNetworkMetrics), metrics)
}

// MockProcessorService is a mock of ProcessorService interface.
type MockProcessorService struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorServiceMockRecorder
}

// MockProcessorServiceMockRecorder is the mock recorder for MockProcessorService.
type MockProcessorServiceMockRecorder struct {
	mock *MockProcessorService
}

// NewMockProcessorService creates a new mock instance.
func NewMockProcessorService(ctrl *gomock.Controller) *MockProcessorService {
	mock := &MockProcessorService{ctrl: ctrl}
	mock.recorder = &MockProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorService) EXPECT() *MockProcessorServiceMockRecorder {
	return m.recorder
}

// GetAverages mocks base method.
func (m *MockProcessorService) GetAverages() model.SystemMetricAverage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverages")
	ret0, _ := ret[0].(model.SystemMetricAverage)
	return ret0
}

// GetAverages indicates an expected call of GetAverages.
func (mr *MockProcessorServiceMockRecorder) GetAverages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverages", reflect.TypeOf((*MockProcessorService)(nil).GetAverages))
}

// GetLatestMetric mocks base method.
func (m *MockProcessorService) GetLatestMetric() (model.SystemMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestMetric")
	ret0, _ := ret[0].(model.SystemMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMetric indicates an expected call of GetLatestMetric.
func (mr *MockProcessorServiceMockRecorder) GetLatestMetric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMetric", reflect.TypeOf((*MockProcessorService)(nil).GetLatestMetric))
}

// GetMetricsByTimeRange mocks base method.
func (m *MockProcessorService) GetMetricsByTimeRange(start, end time.Time) []model.SystemMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsByTimeRange", start, end)
	ret0, _ := ret[0].([]model.SystemMetric)
	return ret0
}

// GetMetricsByTimeRange indicates an expected call of GetMetricsByTimeRange.
func (mr *MockProcessorServiceMockRecorder) GetMetricsByTimeRange(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsByTimeRange", reflect.TypeOf((*MockProcessorService)(nil).GetMetricsByTimeRange), start, end)
}

// StartCollect mocks base method.
func (m *MockProcessorService) StartCollect(stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCollect", stopCh)
}

// StartCollect indicates an expected call of StartCollect.
func (mr *MockProcessorServiceMockRecorder) StartCollect(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCollect", reflect.TypeOf((*MockProcessorService)(nil).StartCollect), stopCh)
}
